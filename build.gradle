plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.4'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'jacoco'
    id "org.sonarqube" version "4.3.1.3277"
}

group = 'com.hseong'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

test {
    finalizedBy jacocoTestReport  // 테스트 실행 후 항상 report가 생성됩니다.
}

//sonar start
sonar {
    properties {
        property "sonar.projectKey", "hseong3243-study_CI-CD"
        property "sonar.organization", "hseong3243-study"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}
//sonar end

//jacoco start
jacoco {
    toolVersion = "0.8.9"
}
jacocoTestReport {
    dependsOn test  // report를 생성하기 전에 테스트를 실행해야합니다.
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
    finalizedBy jacocoTestCoverageVerification  // 테스트 실행 후 항상 테스트 커버리지 검증을 실행합니다.
}
jacocoTestCoverageVerification {  // 코드 커버리지를 검증합니다. 규칙을 만족하지 못하면 빌드는 실패합니다.
    violationRules {
        rule {  // 규칙을 지정합니다.
            enabled = true
            element = 'CLASS'  // 클래스 단위로 규칙을 체크합니다.

            // 브랜치 커버리지를 최소 70% 만족시켜야 합니다.
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                maximum = 0.70
            }

            // 라인 커버리지를 최소 80% 만족시켜야 합니다.
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }

            excludes = ['Q*.class', '*CicdApplication*']  // Q클래스와 메인 메서드를 대상에서 제외합니다.
        }
    }
}
//jacoco end